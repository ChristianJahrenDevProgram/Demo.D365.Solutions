name: 02. Build & Deploy

on:
  workflow_run:
    workflows: ['01. Export & Commit']
    types: [completed]

env:
  RUNNER_DEBUG: 1
  SOLUTION_TARGET_FOLDER: PowerPlatform/Solutions/

jobs:
  capture-params:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    outputs:
      solution_name: ${{ steps.set-workflow-variables.outputs.solution_name }}
      is_upgrade: ${{ steps.set-workflow-variables.outputs.is_upgrade }}

    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "context.json"
            })[0];
            
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/context.zip`, Buffer.from(download.data));
            
      - name: 'Unzip artifact'
        run: unzip context.zip
      - name: 'Return Parsed JSON'
        uses: actions/github-script@v6
        id: return-parsed-json
        with:
          script: |
            let fs = require('fs');
            let data = fs.readFileSync('./context.json');
            return JSON.parse(data);

      - name: 'Set outputs for other jobs'
        id: set-workflow-variables
        run: |
          echo "solution_name=${{ fromJSON(steps.return-parsed-json.outputs.result).solution_name }}" >> $GITHUB_OUTPUT
          echo "type_of_import=${{ fromJSON(steps.return-parsed-json.outputs.result).type_of_import }}" >> $GITHUB_ENV

          if [ "${{ env.type_of_import }}" = "upgrade" ]; then
            echo "is_upgrade=true" >> $GITHUB_OUTPUT
          else
            echo "is_upgrade=false" >> $GITHUB_OUTPUT
          fi
      
  build-and-stage:
    needs: [capture-params]
    runs-on: ubuntu-latest

    env:
      solution_name: ${{ needs.capture-params.outputs.solution_name }}
      is_upgrade: ${{ needs.capture-params.outputs.is_upgrade }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Get current date
        id: date
        run: echo "VERSION_DATE=$(date +'%y%m%d')" >> $GITHUB_ENV

      - name: Get revision
        id: revision
        run: |
          # Find the revision number by counting previous runs today
          rev=$(git rev-list --count --since="midnight" HEAD)
          echo "REVISION=$rev" >> $GITHUB_ENV

      - name: Generate version name
        run: |
          VERSION_NAME="1.0.${{ env.VERSION_DATE }}${{ env.REVISION }}"
          echo "Version name is: $VERSION_NAME"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: Update Solution XML with VERSION_NAME
        run: |
          find "${{ github.workspace }}/${{ github.event.inputs.solution_name }}/SolutionPackage" -name "Solution.xml" | while read file; do
            sed -i 's/<Version>[^<]*<\/Version>/<Version>'"${{ env.VERSION_NAME }}"'<\/Version>/g' "$file"
          done

      - name: Pack Solution
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-folder: ${{ github.workspace }}/${{ github.event.inputs.solution_name }}/SolutionPackage
          solution-file: ${{runner.temp}}/packed/${{ github.event.inputs.solution_name }}_managed.zip
          solution-type: 'Managed'
      
      - name: Import solution as unmanaged to build environment
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.BUILD_ENVIRONMENT_URL }}
          app-id: ${{ vars.CLIENTIDALMDEV }}
          client-secret: ${{ secrets.CLIENTSECRETALMDEV }}
          tenant-id: ${{ vars.TENANTID }}
          solution-file: ${{runner.temp}}/packed/${{ github.event.inputs.solution_name }}_managed.zip
          force-overwrite: false # tar evigheter med true
          publish-changes: false
          run-asynchronously: false

      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: drop
          path: '${{runner.temp}}/packed/**'
          overwrite: true

  # release-to-test:
  #   needs: [build-and-stage]
  #   runs-on: ubuntu-latest
  #   environment:
  #    name: test
  #    url: 'https://org693bed5b.crm4.dynamics.com/'
  #   env:
  #     RUNNER_DEBUG: 1
  #     SOLUTION_NAME: ${{ needs.build-and-stage.outputs.solution_name }}
  #     IS_UPGRADE: ${{ needs.build-and-stage.outputs.is_upgrade }}

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Install Power Platform Tools
  #     uses: microsoft/powerplatform-actions/actions-install@v1

  #   - name: Download Artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       path: '${{runner.temp}}/artifacts'
  #       name: 'drop'

  #   - name: Set upgrade flag
  #     run: |
  #       if [ "${{ github.event.inputs.type_of_import }}" = "upgrade" ]; then
  #         echo "is_upgrade=true" >> $GITHUB_ENV
  #       else
  #         echo "is_upgrade=false" >> $GITHUB_ENV
  #       fi

  #   - name: Print upgrade flag
  #     run: echo "Is upgrade? ${{ env.is_upgrade }}"

  #   - name: Import solution to Test
  #     uses: microsoft/powerplatform-actions/import-solution@v1
  #     with:
  #       environment-url: ${{ vars.TEST_ENVIRONMENT_URL }}
  #       app-id: ${{ vars.TEST_CLIENT_ID }}
  #       client-secret: ${{ secrets.TEST_CLIENT_SECRET }}
  #       tenant-id: ${{ vars.TENANTID }}
  #       solution-file: '${{runner.temp}}/artifacts/${{ github.event.inputs.solution_name }}_managed.zip'
  #       force-overwrite: ${{ env.IS_UPGRADE }}
  #       publish-changes: true
  #       activate-plugins: true
  #       run-asynchronously: false # endre til true etter testing
  #       stage-and-upgrade: ${{ env.is_upgrade }}

