name: build & deploy

on:
  repository_dispatch:
    types: [build-and-deploy-event]
  workflow_dispatch:
    inputs:
      solution_name:
        description: 'Solution to export'
        required: true
        default: 'ALMDemo'
      type_of_import:
        description: 'Upgrade or Update'
        type: 'choice'
        required: true
        options: 
        - 'upgrade'
        - 'update'
        default: 'update'


env:
  RUNNER_DEBUG: 1
  SOLUTION_TARGET_FOLDER: PowerPlatform/Solutions/

jobs:
  build-and-release-to-test:
    runs-on: ubuntu-latest

    outputs:
      solution_name: ${{ steps.set-output-variables.outputs.solution_name }}
      is_upgrade: ${{ steps.set-output-variables.outputs.is_upgrade }}

    environment:
     name: test
     url: 'https://test-christian.crm4.dynamics.com/'

    steps:
      - uses: actions/checkout@v4

      - name: Determine trigger and create variables
        id: set-output-variables
        run: |
          if [ -n "${{ github.event.client_payload.solution_name }}" ]; then
            echo "solution_name=${{ github.event.client_payload.solution_name }}" >> $GITHUB_ENV
            echo "solution_name=${{ github.event.client_payload.solution_name }}" >> $GITHUB_OUTPUT
            echo "is_upgrade=${{ github.event.client_payload.type_of_import }}" >> $GITHUB_ENV
            echo "is_upgrade=${{ github.event.client_payload.type_of_import }}" >> $GITHUB_OUTPUT
          else
            echo "solution_name=${{ github.event.inputs.solution_name }}" >> $GITHUB_ENV
            echo "solution_name=${{ github.event.inputs.solution_name }}" >> $GITHUB_OUTPUT
            echo "is_upgrade=${{ github.event.inputs.type_of_import }}" >> $GITHUB_ENV
            echo "is_upgrade=${{ github.event.inputs.type_of_import }}" >> $GITHUB_OUTPUT
          fi

      - name: Display Solution Name
        run: echo "${{env.solution_name}}, ${{env.is_upgrade}}"

      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Get current timestamp
        id: timestamp
        run: echo "timestamp=$(date -u +"%d%m%YT%H%M")" >> $GITHUB_ENV

      # lag en lÃ¸sning for versjonering

      - name: Pack Solution
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-folder: ${{ github.workspace }}/${{env.solution_name}}/SolutionPackage
          solution-file: ${{runner.temp}}/packed/${{env.solution_name}}_managed.zip
          solution-type: 'Managed'

      - name: Set upgrade flag
        run: echo "is_upgrade=$([[ '${{env.is_upgrade}}' == 'upgrade' ]] && echo true || echo false)" >> $GITHUB_ENV

      - name: Import solution to Test
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ vars.TEST_ENVIRONMENT_URL }}
          app-id: ${{ vars.TEST_CLIENT_ID }}
          client-secret: ${{ secrets.TEST_CLIENT_SECRET }}
          tenant-id: ${{ vars.TENANTID }}
          solution-file: '${{runner.temp}}/packed/${{env.solution_name}}_managed.zip'
          force-overwrite: ${{ env.is_upgrade }}
          publish-changes: true
          activate-plugins: true
          run-asynchronously: true 
          stage-and-upgrade: ${{ env.is_upgrade }}

      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: drop
          path: '${{runner.temp}}/packed/**'
          overwrite: true

 
  release-to-prod:
    needs: [build-and-release-to-test]
    runs-on: ubuntu-latest

    env:
      solution_name: ${{ needs.build-and-release-to-test.outputs.solution_name }}
      is_upgrade: ${{ needs.build-and-release-to-test.outputs.is_upgrade }}

    environment:
     name: prod
     url: 'https://org693bed5b.crm4.dynamics.com/'

    steps:
    - uses: actions/checkout@v4

    - name: Install Power Platform Tools
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        path: '${{runner.temp}}/artifacts'
        name: 'drop'

    - name: Set upgrade flag
      run: echo "is_upgrade=$([[ '${{env.is_upgrade}}' == 'upgrade' ]] && echo true || echo false)" >> $GITHUB_ENV

    - name: Import solution to Production
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        environment-url: ${{ vars.PROD_ENVIRONMENT_URL }}
        app-id: ${{ vars.PROD_CLIENT_ID }}
        client-secret: ${{ secrets.PROD_CLIENT_SECRET }}
        tenant-id: ${{ vars.TENANTID }}
        solution-file: '${{runner.temp}}/artifacts/${{env.solution_name}}_managed.zip'
        force-overwrite: ${{ env.is_upgrade }}
        publish-changes: true
        activate-plugins: true
        run-asynchronously: true
        stage-and-upgrade: ${{ env.is_upgrade }}
